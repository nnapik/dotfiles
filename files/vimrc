"{{{ defining g:os and hostname
au!
if !exists('g:os')
    if has('win32') || has ('win16')
        let g:os = 'Win'
    else
        let g:os = substitute(system('uname'), '\n', '', '')
    endif
endif

let hostname = substitute(system('hostname'), '\n', '', '')
if hostname == 'PNedoma2249'
    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") && g:os == 'Win' | NERDTree d:\repos | endif
endif
"}}}
"{{{ vim-plug
filetype off
let iCanHazPlug=1
if g:os == 'Win'
    "{{{ vim-plug Plug win
    let plug_file=expand('$HOME/vimfiles/autoload/plug.vim')
    if !filereadable(plug_file)
        echo "Installing vim-plug.."
        echo "... not supported on win yet"
        let iCanHazPlug=0
    endif
    "}}}
else
    "{{{ vim-plug install ux
    let plug_file=expand('$HOME/.vim/autoload/plug.vim')
    if !filereadable(plug_file)
        echo "Installing vim-plug.."
        echo ""
        silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        let iCanHazPlug=0
    endif
    "}}}
endif

call plug#begin()
" Add plugins here:
Plug 'morhetz/gruvbox'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-surround'
Plug 'scrooloose/syntastic'
Plug 'kien/ctrlp.vim'
Plug 'ervandew/supertab'
Plug 'PProvost/vim-ps1'
Plug 'easymotion/vim-easymotion'
Plug 'kien/rainbow_parentheses.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'kshenoy/vim-signature'
Plug 'christoomey/vim-tmux-navigator'
Plug 'roxma/vim-tmux-clipboard'
Plug 'mileszs/ack.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = [
            \'coc-json',
            \'coc-git',
            \'coc-pyright',
            \'coc-rust-analyzer',
            \'coc-rls',
            \'coc-sh',
            \'coc-clangd',
            \'coc-docker'
            \]
Plug 'christianrondeau/vim-base64'

" Language plugins
Plug 'rust-lang/rust.vim', {'for':'rust'}
Plug 'omnisharp/omnisharp-vim'
Plug 'yaroot/wowlua.vim'

call plug#end()

if iCanHazPlug == 0
    echo "Installing Plugins, please ignore key map error messages"
    echo ""
    :PlugInstall
endif
filetype plugin indent on
"}}}
"{{{ Airline
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1

" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

"let g:airline_theme='minimalist'

let g:airline_highlighting_cache = 1
let g:airline_focuslost_inactive = 0
"}}}
"{{{ Mappings

"{{{ Vanilla
"change leader to ,
:let mapleader = ","

"jk to leav insert mode
inoremap jk <Esc>

"map to jump to beginning/end of line
nnoremap <s-h> I<ESC>
nnoremap <s-l> A<ESC>

" cabbrev x bd
" cabbrev q bd
" save and closes a file with a leader
nnoremap <silent> <Leader>x :wq<CR>
nnoremap <silent> <Leader>w :w<CR>
nnoremap <silent> <Leader>q :q<CR>
nnoremap <silent> <Leader>d :bd<CR>

" Open Url on this line with the browser \w
nnoremap <Leader>f :call Browser ()<CR>
nnoremap <Leader>t :terminal<CR>
nnoremap <Leader>todo :call TodoListMode ()<CR>


"mappings for tabs
nnoremap <silent> <Leader>tn :tabnew<CR>
nnoremap <silent> <Leader>tl :tabnext<CR>
nnoremap <silent> <Leader>th :tabprev<CR>
nnoremap <silent> <Leader>td :tabclose<CR>

"mappings for buffers
nnoremap <silent> <Leader>bn :enew<CR>
nnoremap <silent> <Leader>bl :bnext<CR>
nnoremap <silent> <Leader><Tab> :bnext<CR>
nnoremap <silent> <Leader>bh :bprev<CR>

"move to the split in the direction shown, or create a new split
" nnoremap <silent> <C-h> :call WinMove('h')<cr>
" nnoremap <silent> <C-j> :call WinMove('j')<cr>
" nnoremap <silent> <C-k> :call WinMove('k')<cr>
" nnoremap <silent> <C-l> :call WinMove('l')<cr>

"resize windows
nnoremap <silent> <C-Left> :vertical resize -5<CR>
nnoremap <silent> <C-Right> :vertical resize +5<CR>
nnoremap <silent> <C-Up> :resize -5<CR>
nnoremap <silent> <C-Down> :resize +5<CR>

" Edit .vimrc
nnoremap <silent> <Leader>ev :e $MYVIMRC<CR>

"reload .vimrc
nnoremap <silent> <Leader>sv :source $MYVIMRC<cr>

" Up and down are more logical with g..
nnoremap <silent> k gk
nnoremap <silent> j gj

" Create Blank Newlines and stay in Normal mode
nnoremap <Leader>o o<Esc>
nnoremap <Leader>O O<Esc>

nnoremap <Leader>; mqA;<ESC>`qmq

" Space will toggle folds!
nnoremap <space> za

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
map N Nzzzv
map n nzzzv

" Testing
set completeopt=longest,menuone,preview

" Swap ; and :  Convenient.
nnoremap ; :

"autoindent paster code
nnoremap p p=`]

"reindent whole file
nnoremap <Leader>= gg=G''

"save file and open current directory
nnoremap <Leader>. :w<CR>:e .<CR>

"press enter
nnoremap <Leader><CR> i<CR><Esc>

"mapping for rust
augroup rust
    autocmd!
augroup END
nnoremap <Leader>rc :w<CR>:!cargo check<CR>
nnoremap <Leader>rr :w<CR>:!cargo run<CR>

"replace the word under cursor
nnoremap <leader>* :%s/\<<c-r><c-w>\>//g<left><left>
nnoremap <leader>g :lv //gj %<left><left><left><left><left>
nnoremap <leader>r :%s///g<left><left><left>

"indent json file
nnoremap =j :%!python -m json.tool<CR>

" Commenting blocks of code.
noremap <silent> ,cc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
noremap <silent> ,cu :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>

"remap space tab to find next marker
" inoremap <S-space> <ESC>/<++><CR>"_c4l
" vnoremap <S-space> <ESC>/<++><CR>"_c4l
" noremap <S-space> <ESC>/<++><CR>"_c4l

"}}}

"{{{ NERDTree
nnoremap <Leader>n :NERDTreeToggle<CR>
let NERDTreeMapUpdirKeepOpen='u'
let NERDTreeMapUpdir='U'
" let NERDTreeMapChangeRoot='<CR>'
"}}}
"}}}
"{{{ CtrlP

let g:ctrlp_map = '<C-P>'
let g:ctrlp_cmd = 'CtrlPBuffer'
let g:ctrlp_custom_ignore = {
            \ 'dir': '\v[\/](\.(git|hg|svn|vscode)|\_site|bin|obj)$',
            \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
            \}

"}}}
"{{{ ACK
if (executable('ag'))
    let g:ackprg = 'ag --vimgrep'
endif
cnoreabbrev Ack Ack!
nnoremap <Leader>a :Ack!<Space>
"}}}"
"{{{ You complete me <3
if g:os == 'Win'
    let g:ycm_server_python_interpreter = 'c:\Python27amd64\python.exe'
endif
"}}}
"{{{ OMNISHARP
let g:OmniSharp_server_stdio = 1
let g:OmniSharp_start_server = 0

augroup omnisharp
    au!
    " Show type information automatically when the cursor stops moving
    autocmd CursorHold *.cs call OmniSharp#TypeLookupWithoutDocumentation()
    autocmd FileType cs nnoremap <buffer> <Leader>ss :OmniSharpStartServer .<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>sp :OmniSharpStopServer<CR>

    " The following commands are contextual, based on the cursor position.
    autocmd FileType cs nnoremap <buffer> gd :OmniSharpGotoDefinition<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>fi :OmniSharpFindImplementations<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>fs :OmniSharpFindSymbol<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>fu :OmniSharpFindUsages<CR>

    " Finds members in the current buffer
    autocmd FileType cs nnoremap <buffer> <Leader>fm :OmniSharpFindMembers<CR>

    autocmd FileType cs nnoremap <buffer> <Leader>fx :OmniSharpFixUsings<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>tt :OmniSharpTypeLookup<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>dc :OmniSharpDocumentation<CR>
    autocmd FileType cs nnoremap <buffer> <C-\> :OmniSharpSignatureHelp<CR>
    autocmd FileType cs inoremap <buffer> <C-\> <C-o>:OmniSharpSignatureHelp<CR>

    " Find all code errors/warnings for the current solution and populate the quickfix window
    autocmd FileType cs nnoremap <buffer> <Leader>cc :OmniSharpGlobalCodeCheck<CR>

    " Contextual code actions (uses fzf, CtrlP or unite.vim when available)
    nnoremap <Leader><Space> :OmniSharpGetCodeActions<CR>
    " Run code actions with text selected in visual mode to extract method
    xnoremap <Leader><Space> :call OmniSharp#GetCodeActions('visual')<CR>

augroup END


"}}}
"{{{ Syntastic
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_cs_checkers = ['code_checker']
let g:syntastic_python_checkers=['flake8']
"}}}
"{{{ NERDTree
autocmd StdinReadPre * let s:std_in=1

"Start nerdtree when no files were specified

"Start nerdtree when opening a directory
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

let NERDTreeShowHidden=1

"}}}
"{{{ Misc Settings

"turn the bell off
set visualbell
" Necesary  for lots of cool vim things
set nocompatible
"Automatically cd into the directory that the file is in:"
set autochdir

if g:os == 'Win'
    set fileformats=dos,unix
else
    set fileformats=unix,dos
endif

set noswapfile
set scrolloff=10 "allways view at least 5 lines up/down from the cursor
set previewheight=5


"set backup
"set backupdir=~\vimfiles\backup
"set directory=~\vimfiles\tmp
set autoread "watch for file changes
set wrap

"use system clipboard as unnamed register
set clipboard=unnamed

"Highlight the current line
if g:os == 'Win'
    set nocul
else
    set cul
endif
set cul

"copy/paste winlike
" source $VIMRUNTIME/mswin.vim
" behave mswin

" This shows what you are typing as a command.  I love this!
set showcmd

" Folding Stuffs
set foldmethod=marker

" Needed for Syntax Highlighting and stuff
filetype on
filetype plugin on
syntax enable
set grepprg=grep\ -nH\ $*

" Who doesn't like autoindent?
set autoindent

" Spaces are better than a tab character
set expandtab
set smarttab

" Who wants an 8 character tab?  Not me!
set shiftwidth=4
set softtabstop=4
set shiftround

" Real men use gcc
"compiler gcc

" Cool tab completion stuff
set wildmenu
set wildmode=list:longest,full

" Enable mouse support in console
set mouse=a

" Got backspace?
set backspace=2

" Line Numbers PWN!
set number

" Ignoring case is a fun trick
set ignorecase

" And so is Artificial Intellegence!
set smartcase

" Incremental searching is sexy
set incsearch

"i dont care about case when searching
set ignorecase

" Highlight things that we find with the search
set hlsearch
" Remove highlight on enter
nnoremap <silent> <CR> :noh<CR><CR>
"
"clear search pattern on startup
let @/ = ""

set hidden

" Set off the other paren
highlight MatchParen ctermbg=4

if has("multi_byte")
    if &termencoding == ""
        let &termencoding = &encoding
    endif
    set encoding=utf-8
    setglobal fileencoding=utf-8
    "setglobal bomb
    set fileencodings=ucs-bom,utf-8,latin1
endif
set encoding=utf-8

set splitright
set splitbelow
set winheight=30
set winminheight=5


" }}}
"{{{ Functions
"{{{ JSON->c# object and back
"
function! JsonToC ()
    "bool
    %s/^\s*"\(.*\)": \=\(true\|false\),\=\s*$/public bool \1 { get; set; }/ig
    "string
    %s/^\s*"\(.*\)": \=".*",\=\s*$/public string \1 { get; set; }/ig
    "int
    %s/^\s*"\(.*\)": \=\d*,\=\s*$/public int \1 { get; set; }/ig
endfunction

function! CToJson()
    %s/^\s*public int \(.*\) \={ \=get; \=set; \=}\s*/"\1": 0,
    %s/^\s*public bool \(.*\) \={ \=get; \=set; \=}\s*/"\1": false,
    %s/^\s*public string \(.*\) \={ \=get; \=set; \=}\s*/"\1": "",
endfunction

"}}}

"{{{ Open URL in browser

function! Browser ()
    let line = getline (".")
    let line = matchstr (line, "http[^   )]*")
    exec "!explorer.exe ".line
endfunction

"}}}
"{{{ move windows

function! WinMove(key)
  let t:curwin = winnr()
  exec "wincmd ".a:key
  if (t:curwin == winnr())
    if (match(a:key,'[jk]'))
      wincmd v
    else
      wincmd s
    endif
    exec "wincmd ".a:key
  endif
endfunction
"}}}
"{{{ Todo List Mode

function! TodoListMode()
    vsp ~/.todo.otl
    vsp ~/.notes.txt
endfunction

"}}}

"}}}
"{{{ IABBR's
augroup abbr
    au!
" vim
    au FileType vim :iabbrev <buffer> ife if<++><CR><++><CR>else<CR><++><CR>endif<ESC>kkkk^<S-Space>
    au FileType vim :iabbrev <buffer> iff if<++><CR><++><CR>endif<CR><ESC>kkk^<S-Space>
    au FileType vim :iabbrev <buffer> aug augroup<++><CR>au!<CR><++><CR>augroup END<CR><ESC>kkkk^<S-Space>
" c
    au FileType c,cs,cpp,java,scala :iabbrev <buffer> ife if (<++>){<CR><++>}<CR>else {<CR><++>}<CR><ESC>kkkk^<S-Space><BS>
    au FileType c,cs,cpp,java,scala :iabbrev <buffer> iff if (<++>){<CR><++>}<CR><ESC>kk^<S-Space><BS>
    "rust
    au FileType rust :iabbrev <buffer> pln println!("");<ESC>hhi
augroup END

""}}}
"{{{ Autocommands
"reload vim when saving .vimrc
"
augroup fileTypes
    au!
    au BufNewFile,BufRead *.otl setfiletype text
augroup END

augroup BuffWrite
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc if exists("$MYVIMRC") | so $MYVIMRC | endif | if has('gui_running') && exists("$MYGVIMRC") | so $MYGVIMRC | endif | if has('gui_running') | simalt ~x | endif
    au BufWritePost .tmux.conf,tmux.conf silent !tmux source ~/.tmux.conf
    au BufWritePre cs,csproj,sln,xml,config :normal gg=G
    au BufWritePre * %s/\s\+$//e
augroup END

augroup guiEnter
    au!
    au FileType yaml,json setlocal ts=2 sts=2 sw=2 expandtab
    au GUIEnter * simalt ~x
augroup END

augroup comment
    au!
    au FileType vim                    let b:comment_leader = '" '
    au FileType c,cs,cpp               let b:comment_leader = '// '
    au FileType java,scala             let b:comment_leader = '// '
    au FileType python                 let b:comment_leader = '# '
    au FileType sh,ruby                let b:comment_leader = '# '
    au FileType conf,fstab             let b:comment_leader = '# '
augroup END

augroup quickfix
    au!
    au QuickFixCmdPost [^l]* cwindow
    au QuickFixCmdPost l* lwindow
augroup END

augroup text_files
    au!
    au FileType markdown,text setlocal spell spelllang=en_us
augroup END

"}}}
"{{{ Easymotion
let g:EasyMotion_do_mapping = 0 " Disable default mappings
map <Leader> <Plug>(easymotion-prefix)

" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
nmap f <Plug>(easymotion-overwin-f)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap f <Plug>(easymotion-overwin-f2)
"
" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1
"
" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
"}}}
"{{{ "RainbowParentheses"
augroup rainbowParentheses
    au!
    au VimEnter * RainbowParenthesesToggle
    au Syntax * RainbowParenthesesLoadRound
    au Syntax * RainbowParenthesesLoadSquare
    au Syntax * RainbowParenthesesLoadBraces
augroup END
"}}}


set guifont=Lucida_Console:h11
set background=dark
colorscheme gruvbox

